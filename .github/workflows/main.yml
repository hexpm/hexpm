name: CI

on: [push, pull_request]

jobs:
  format:
    name: Format
    runs-on: ubuntu-24.04
    env:
      otp: 27.2
      elixir: 1.18.1

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp }}
          elixir-version: ${{ env.elixir }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-elixir-${{ env.elixir }}-otp-${{ env.otp }}-${{ hashFiles('**/mix.lock') }}

      - name: Install dependencies
        run: mix do deps.get, deps.compile

      - name: Check compilation warnings
        run: mix compile --warnings-as-errors

      - name: Check formatting
        run: mix format --check-formatted

      - name: Verify seeds
        run: mix ecto.setup

  test-hexpm:
    name: Test Hexpm
    runs-on: ubuntu-24.04
    env:
      otp: 27.2
      elixir: 1.18.1

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp }}
          elixir-version: ${{ env.elixir }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-elixir-${{ env.elixir }}-otp-${{ env.otp }}-${{ hashFiles('**/mix.lock') }}

      - name: Install dependencies
        run: mix do deps.get, deps.compile

      - name: Compile
        run: MIX_ENV=test mix compile

      - name: Run tests
        run: mix test

  test-hex:
    name: Test Hex
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        hex-version: [main, v2.1, v2.0]

    env:
      HEXPM_PATH: ..
      otp: 27.2
      elixir: 1.18.1

    steps:
      - uses: actions/checkout@v4

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp }}
          elixir-version: ${{ env.elixir }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-elixir-${{ env.elixir }}-otp-${{ env.otp }}-${{ hashFiles('**/mix.lock') }}

      - name: Install hexpm dependencies
        run: |
          mix deps.get
          mix deps.compile

      - name: Clone hex
        run: |
          git clone https://github.com/hexpm/hex hex -b ${{ matrix.hex-version }} --depth 1

      - name: Cache hex dependencies
        uses: actions/cache@v3
        with:
          path: |
            hex/deps
            hex/_build
          key: ${{ runner.os }}-elixir-${{ env.elixir }}-otp-${{ env.otp }}-hex-${{ matrix.hex-version }}-${{ hashFiles('hex/mix.lock') }}

      - name: Install dependencies
        run: |
          cd hex && mix deps.get && MIX_ENV=test mix deps.compile && cd ..

      - name: Run tests
        run: cd hex && mix test --include integration && cd ..

  docker:
    name: Docker
    runs-on: ubuntu-24.04
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      IMAGE_NAME: 'hexpm'
      PROJECT_ID: 'hexpm-prod'
      SERVICE_ACCOUNT: ${{ secrets.GCLOUD_SERVICE_ACCOUNT }}
      WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCLOUD_WORKFLOW_IDENTITY_POOL_PROVIDER }}
    steps:
      - uses: actions/checkout@v4
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Google auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        # if: ${{ github.event_name != 'pull_request' }}
        with:
          token_format: 'access_token'
          project_id: ${{ env.PROJECT_ID }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        # if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: gcr.io
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHORT_SHA }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
